封装线程类
1.线程标识符
pthread_self
gettid

每个进程有一个pid,类型pid_t，由getpid()取得。
POSIX线程也有一个id，类型pthread_t，由pthread_self()取得，该id由线程库维护
其id空间是各个进程独立的,(即不同进程中的线程可能有相同的id)。Linux中的POSIX
线程库实现的线程其实也是一个进程（LWP）,该进程与主进程（启动线程的进程）共享一些
资源而已，比如代码段，数据段等。

有时候我们可能需要知道线程的真实pid。比如进程P1要向另外一个进程P2中的某个线程发送信号时，
既不能使用P2的pid，更不能使用线程的pthread id，而只能使用该线程的真实pid,称为tid。

有一个函数gettid()可以得到tid，但glibc并没有实现该函数，只能通过Linux的系统调用syscall来获取
用法:return syscall(SYS_gettid)。

2.__thread，gcc内置的线程局部存储设施
__thread只能修饰POD类型
POD类型（plain old data）,与C兼容的原始数据，
例如，结构和整型等C语言中的类型是POD类型，但带有用户
定义的构造函数或虚函数的类则不是
__thread string t_obj1("cppcourse");    //错误，不能调用对象的构造函数
__thread string* t_obj2 = new string;   //错误，初始化只能是编译期常量
__thread string* t_obj3 = NULL          //正确

3.boost::is_same

4.pthread_atfork
int pthread_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void));
调用fork时，内部创建子进程前在父进程中会调用prepare，内部创建子进程成功后，父进程会调用parent，
子进程会调用child。

对于编写多线程程序来说，最好不要再调用fork()。