1.为什么需要原子性操作
锁竞争，为了保证多线程的正确操作

2.gcc原子性操作
// 原子自增操作
type__sync_fetch_and_add(type *ptr, type value)

// 原子比较和交换（设置）操作
type__sync_val_compare_and_swap(type *ptr, type oldval type newval)
type__sync_bool_compare_and_swap(type *ptr, type oldval type newval)

// 原子赋值操作
type__sync_lock_test_and_set(type *ptr. type value)
使用这些原子性操作，编译的时候需要加-march=cpu-type

3.AtomicIntegerT类封装
4.volatile
防止编译器对代码进行优化，确保本条指令不会因为编译器的优化而省略，且要求每次直接读值

当要求使用volatile声明的声明的变量的值的时候，系统总是重新从它所在的内存读取数据，而
不是使用保存在寄存器中的备份。

5.编译选项
-Wall                       大部分警告
-Wextra                     一些额外的警告
-Werror                     当出现警告时转为错误，停止编译
-Wconversion                一些可能改变值的隐式转换
-Wno-unused-parameter       函数中出现未使用的参数，不给出警告
-Wold-style-cares           C风格的转换，给出警告
-Woverloaded-virtual        如果函数的声明隐藏住了基类的虚函数，就给出警告
-Wpointer-arith             对函数指针或者void* 类型的指针进行算术操作时给出警告
-Wshadow                    当一个局部变量遮盖住了另一个局部变量，或者全局变量时，给出警告
-Wwrite-strings             规定字符串常量的类型是const char[length],因此，把这样的地址复制给non-const char* 指针将产生警告，这些警告能够帮助你在编译期间发现企图写入字符串常量的代码
-march=native               指定cpu体系结构为本地平台

6.<base/types.h>
implicit_cast   隐式转换
down_cast       基类对象转为子类对象（要求基类指针指向子类对象）
dynamic_cast必须要在RTTI下使用

7.无锁队列的实现
coolshell.cn/articles/8239.html
